# Introduction to Git and GitHub

::: {.callout-warning}
This chapter is currently in development.
:::

Version control is an essential part of modern software development, enabling teams to collaborate efficiently, track changes, and manage codebases systematically. Git, a distributed version control system, has become the industry standard for tracking modifications and maintaining project history. GitHub, a cloud-based platform built around Git, enhances collaboration by providing a central repository for sharing, reviewing, and integrating code changes.

This chapter introduces Git and GitHub as foundational tools in the DevOps journey. Understanding version control and collaboration through these tools is essential for managing code effectively and enabling seamless teamwork. Whether working independently or within a team, proficiency in Git and GitHub empowers developers to maintain project integrity, experiment with new features, and contribute to open-source projects.

By the end of this chapter, you will:

- Understand the purpose of Git and GitHub.
- Set up Git on your local machine and create a GitHub account.
- Learn basic Git commands to track changes, commit updates, and sync repositories.
- Use branching, merging, and pull requests to collaborate effectively.
- Gain an introductory understanding of CI/CD and how GitHub integrates with automated workflows.

Through hands-on exercises and step-by-step guides, this chapter will equip you with the fundamental skills to manage source code efficiently and collaborate on projects with confidence.



## Introduction to Git and GitHub

{{< video https://youtu.be/-5LWhGRObSM?si=9m6Xmlp2sNyx-rwm >}}


### What is Version Control?

Version control is a system that records changes to a file or set of files over time, allowing developers to track modifications, revert to previous versions, and collaborate seamlessly. It is essential for managing code in any software development process, preventing loss of work, and ensuring a structured workflow.

```{mermaid}
%%| fig-cap: "A version control system allows you and your teammates to work collaboratively, safely, and simultaneously on a single project. Version control helps you track all the code changes made in your project."
%%| label: fig-git-intro
%%{init: {'gitGraph': {'mainBranchName': 'Main codebase'}} }%%

gitGraph
   commit id: "Version 1"
   commit id: "Version 2"
   branch "Your code"
   commit id: "add new feature"
   checkout "Main codebase"
   commit id: "Version 3"
   branch "Someone else's code"
   checkout "Main codebase"
   merge "Your code" id: "Version 4"
   checkout "Someone else's code"
   commit id: "another new feature"
   checkout "Main codebase"
   merge "Someone else's code" id: "Version 5"
```

Without version control, teams often encounter challenges such as overwritten files, difficulty tracking changes, and conflicts when multiple contributors work on the same codebase. For instance, in machine learning (ML) projects, version control is crucial for tracking changes to datasets, model configurations, and source code, enabling reproducibility and iterative improvements.

### What is Git?

[Git](https://git-scm.com/) is a distributed version control system (DVCS) designed to handle everything from small to very large projects efficiently. Unlike centralized version control systems, where a single server stores all versions of a project, Git enables every user to have a complete local copy of the repository. This makes Git robust in handling offline work, merging changes, and maintaining a reliable history of modifications.

For ML systems, Git helps in maintaining different experiment branches, managing multiple versions of code, and integrating model versioning workflows. Developers and data scientists use Git to collaborate on research code, ensuring that experimental changes do not disrupt stable pipelines.

### What is GitHub?

[GitHub](https://github.com/) is a cloud-based platform that provides remote repository hosting and additional features for version control collaboration. It enhances Git's capabilities by offering tools for pull requests, issue tracking, and code review, making it a central hub for software development.

While GitHub is one of the most popular Git hosting services, alternatives like GitLab and Bitbucket provide similar functionality with varying degrees of customization and integration options. In the context of DevOps and ML workflows, GitHub plays a key role in continuous integration/continuous deployment (CI/CD) pipelines, enabling automated testing, deployment, and monitoring of ML models in production environments. By using GitHub, ML engineers can streamline collaboration, ensure code quality, and integrate seamlessly with MLOps platforms.

```{mermaid}
%%| fig-align: "center"
%%| fig-cap: "This illustrates the simple relationship between a local Git repository on a developer's computer and a remote GitHub repository hosted in the cloud. Git and Github work in tandem allow you to push and pull content between the two locations."
architecture-beta
    service github(cloud)[Github]
    service git(disk)[Git on local computer]

    git:T <--> B:github
```

### Using Git and GitHub Together

Although Git and GitHub are separate tools, they are most commonly used together in modern software development. Git serves as the local version control system that tracks changes and manages branches, while GitHub acts as the remote hosting service that facilitates collaboration among multiple contributors. Developers use Git commands to manage their local repositories and push their changes to GitHub for storage, sharing, and team collaboration.

::: {#fig-git-github}
![](images/Gitvs_Github-1a-1.jpg)

Git vs. Github
:::

For ML teams, this combination is particularly powerful. By using Git locally to track changes in data processing scripts, model training code, and experiment configurations, teams can ensure that their work is versioned and reproducible. GitHub then provides a centralized location where team members can review each other’s code, integrate improvements, and leverage automated workflows for model deployment and testing. The synergy between Git and GitHub makes them indispensable tools for both traditional software development and MLOps practices.


## Setting Up Git and GitHub

Git and GitHub are essential tools for managing and collaborating on code projects. This section provides a step-by-step guide to installing Git, creating a GitHub account, and configuring Git for first-time use.

### Installing Git

To begin using Git, you must first install it on your local machine. You can download Git for all operating systems from the official website: [https://git-scm.com/downloads](https://git-scm.com/downloads). This website provides multiple installation options for each operating system, allowing you to choose the one that best fits your needs. 

::: {#fig-git-download}
![](images/git-download.png)

You can download Git for all operating systems from the official website: https://git-scm.com/downloads. This website provides multiple installation options for each operating system, allowing you to choose the one that best fits your needs.
:::

The following are the most common approaches used.

#### Windows

1. Download the Git installer from [https://git-scm.com/downloads](https://git-scm.com/downloads).
2. Run the installer and follow the setup instructions, selecting default options unless specific configurations are needed.
3. Open the Command Prompt or Git Bash and verify the installation by running:
   ```sh
   git --version
   ```

#### macOS

1. Open the Terminal application.
2. Install Git using Homebrew (recommended):
   ```sh
   brew install git
   ```
3. Verify the installation:
   ```sh
   git --version
   ```

#### Linux

1. Open the terminal and use the package manager for your distribution:
   - **Debian/Ubuntu:**
     ```sh
     sudo apt update
     sudo apt install git
     ```
   - **Fedora:**
     ```sh
     sudo dnf install git
     ```
   - **Arch Linux:**
     ```sh
     sudo pacman -S git
     ```
2. Confirm the installation:
   ```sh
   git --version
   ```

### Creating a GitHub Account

To use GitHub for hosting and collaborating on repositories, you need an account.

1. Go to [https://github.com](https://github.com).
   ![](images/github-signup.png)
2. Click **Sign Up** and enter your email, password, and username.
3. Follow the prompts to verify your email and complete the registration process.
4. Once logged in, explore key GitHub features. Take some time to browse around and look at other user profiles and GitHub repositories to see how they are organized. A great way to start is by checking out the following repositories:
  - **pandas:** [pandas](https://github.com/pandas-dev/pandas)
  - **FastAPI:** [https://github.com/tiangolo/fastapi](https://github.com/tiangolo/fastapi)
  - **Pydantic:** [https://github.com/pydantic/pydantic](https://github.com/pydantic/pydantic)
  - **Python Data Visualization:** [https://github.com/talkpython/python-data-visualization](https://github.com/talkpython/python-data-visualization)

    ::: {.callout-tip}
    In these repositories, observe how the code is structured, review the README file, and explore the issues, pull requests, and GitHub Actions tabs.  Don't worry about understanding these as we will be covering them shortly; just get a feel for how a Github repo is structured.
    :::

### Configuring Git for First Use

Before using Git, configure it with your personal information to ensure that commits are properly attributed to you. Configuring Git is essential because it associates your work with your identity, ensuring that every commit you make is correctly attributed to you in Git logs and GitHub repositories.

::: {.callout-tip}
Git has many other settings that can be customized to fit your workflow. You can explore the full list of available configuration options in the [official Git documentation](https://git-scm.com/book/ms/v2/Customizing-Git-Git-Configuration).
:::

1. Open a terminal or command prompt.
2. Set your name:
   ```sh
   git config --global user.name "Your Name"
   ```
3. Set your email:
   ```sh
   git config --global user.email "you@example.com"
   ```
4. Verify your configuration:
   ```sh
   git config --list
   ```

The `--global` flag ensures that these settings apply to all Git repositories on your system. Without this flag, the configuration would only apply to the current repository, meaning you would need to set these details again for every new project. By setting them globally, you ensure a consistent identity across all your projects.

::: {#fig-git-download}
![](images/configure-git.gif)

Configuring Git with your personal information to ensure that commits are properly attributed to you.
:::

With Git installed and configured, and a GitHub account created, you're now ready to start using Git for version control and collaboration. Git and GitHub are extremely powerful and sophisticated tools with a wide range of functionalities. However, for typical day-to-day use on projects, the Git and GitHub workflow can be boiled down to just a handful of essential functionalities. The video that follows provides an introduction to this basic workflow, and the sections that follow will walk you through this workflow step-by-step.

{{< video https://youtu.be/Sd3qRW_EzGc?si=kRQ13xAEKCUpdhI6 >}}

## Git Basics: Tracking and Managing Changes

Git provides powerful tools for tracking and managing changes in your projects. This section covers fundamental Git operations, including creating a repository, staging and committing changes, and viewing repository history.

### Creating a Local Git Repository

A Git repository is essentially a directory (or folder) that has been set up to track changes using Git. When you initialize a Git repository, Git begins monitoring changes to files within that directory, allowing you to record, revert, and collaborate efficiently. You can create a new local repository from scratch or clone an existing one from a remote source to start tracking changes immediately.

#### Initializing a Repository

To start tracking a project with Git, navigate to the project directory in your terminal and initialize a repository:

```sh
cd your-project-folder
git init
```

This creates a hidden `.git` directory, where Git stores all version control information.

::: {.callout-note collapse="true"}
## `.git` directory

At this time, you don’t need to worry about the contents of the `.git` directory, as it is managed by Git automatically. However, if you want to explore its contents, you can make hidden files visible:

- On **Windows**, open File Explorer, go to the **View** tab, and check **Hidden items**.
- On **macOS or Linux**, open the terminal and use:
  ```sh
  ls -la
  ```
  Or you can also use \`Cmd + Shift + .\`
:::

::: {.callout-caution}
Be cautious not to modify any files inside the `.git` directory, as doing so may corrupt the repository.
:::

#### Cloning a Repository

Often, projects you work on are not brand new but rather existing projects where you are a new collaborator. Most of the time, these projects are already hosted on GitHub, and your objective is to make a copy of the repository on your local machine so you can start contributing to the source code. If you want to work on an existing project, you can clone a remote repository:

```sh
git clone <repository-url>
```

This creates a local copy of the remote repository on your machine, allowing you to track and contribute changes.

::: {.callout-note}
To find the Git repository URL on GitHub, navigate to the main page of the repository you are interested in. Under the repository name, you will see a green "Code" button. Click on this button to reveal a dropdown menu that displays the repository URL. You can choose between HTTPS, SSH, or GitHub CLI options. Copy the URL provided to use it for cloning the repository to your local machine or for other Git operations.

For example, if you were to clone the [UC BANA 7075 Github repo](https://github.com/bradleyboehmke/uc-bana-7075) shown below you would use:

```sh
git clone https://github.com/bradleyboehmke/uc-bana-7075.git
```

![Git Repository URL](images/git-repo-url.png)
:::


### Staging and Committing Changes

Now that you have a local repository set up for your project, you can start making changes to project documentation, code files, or other assets and save these changes systematically. This ensures that you have a record of modifications, making it easier to track progress, revert changes if necessary, and collaborate with others.  Git uses a two-step process to save changes:

1. Step 1 is called staging and
2. Step 2 is called committing.

#### Adding Files to Staging

Staging in Git is the process of preparing changes for a commit. When you modify files in your working directory, Git does not automatically track them for the next commit. Instead, you must explicitly add them to the staging area using the git add command. This allows you to carefully select which changes you want to include in your next commit, rather than committing all changes at once.

Think of the staging area as a middle step between your working directory (where changes are made) and your repository (where commits are stored). This separation gives you greater control over your commits, allowing you to structure them in a meaningful way.

To stage a specific file you can use:

```sh
git add filename
```

To stage all modified files:

```sh
git add .
```

::: {.callout-caution}
Be care when using `git add .` as this will stage all files that have changed. Often, we want to be deliberate about which files we stage so files don't accidently get staged and committed.
:::

#### Committing Changes

Once files are staged, you can commit them with a descriptive message:

```sh
git commit -m "Commit message describing changes"
```

Commits serve as snapshots of your project, capturing the exact state of your files at a given point in time. Each commit represents a recorded change, allowing you to track modifications, revert to previous versions if needed, and collaborate with others more effectively. Commits also create a historical timeline of your project, making it easier to understand the evolution of the codebase and identify when specific changes were introduced. By using meaningful commit messages, you can document the purpose of each change, improving project maintainability and readability.

```{mermaid}
%%| fig-cap: "Commits serve as snapshots of your project, capturing the exact state of your files at a given point in time. Each commit represents a recorded change, allowing you to track modifications and revert to previous versions if needed."
%%| label: fig-git-commit
%%{init: {'gitGraph': {'mainBranchName': 'Main codebase'}} }%%

gitGraph
   commit id: "Change 1"
   commit id: "Change 2"
   commit id: "Change 3"
```

### Viewing Repository Status & History

#### Checking Current Work Status

At any point while modifying files in the repository, you can check which files have changed, which are staged, and which are unstaged by running the following command:

```sh
git status
```

This command provides a summary of the repository’s current state.

#### Checking Commit History

You can also view a log of all past commits with:

```sh
git log
```

This displays commit messages, authors, timestamps, and unique commit hashes.

#### Understanding the SHA Hash for Commits

Each commit is assigned a unique SHA hash, which acts as an identifier, ensuring that every change in the repository has a distinct reference. A SHA (Secure Hash Algorithm) hash in Git is a 40-character hexadecimal string that uniquely represents a commit. This hash is generated based on the commit's content, metadata, and parent commit(s), making it nearly impossible to duplicate. The SHA hash is used to reference specific commits, allowing developers to revert to, compare, or identify previous changes efficiently.

```{mermaid}
%%| fig-cap: "Example of what commit SHA hashes look like.  Although the actual SHA hash is longer, you typically just see the first 7+ digits of the hash."
%%| label: fig-git-hash
%%{init: {'gitGraph': {'mainBranchName': 'Main codebase'}} }%%

gitGraph
   commit
   commit
   commit
```

Understanding SHA hashes is crucial for navigating a project's history and managing different versions effectively. Each SHA hash serves as a permanent reference point, enabling developers to track specific changes, revert to stable versions, and collaborate efficiently. When working in a team, referencing SHA hashes in discussions and bug fixes ensures clarity and precision, reducing ambiguity when identifying code changes. Additionally, SHA hashes play a fundamental role in advanced Git operations such as rebasing and resolving merge conflicts.

::: {.callout-important}
Although understanding SHA hashes is important, for now, just realize that each commit has a SHA hash identifier that allows you to reference specific commits throughout a project's lifecycle.
:::

You can reference specific commits using their SHA hash in various Git commands, such as checking out a previous commit. This will allow you to revert all project files back to the state that they were in based on the commit hash provided.

```sh
git checkout <commit-hash>
```



## Synchronizing with GitHub

- **Connecting a Local Repository to GitHub**
  - Creating a new repository on GitHub.
  - Pushing an existing repository to GitHub (`git remote add origin`, `git push`).
- **Pulling Changes from GitHub**
  - Fetching and merging remote changes (`git pull`).
- **Handling Merge Conflicts**
  - Understanding merge conflicts and resolving them manually.


## Collaboration with Branching and Pull Requests

- **Why Use Branches?**
  - Overview of branching as a way to develop features without affecting the main branch.
- **Creating and Switching Branches**
  - Creating a new branch (`git branch new-feature`).
  - Switching branches (`git checkout new-feature` or `git switch new-feature`).
- **Merging Branches**
  - Merging changes into `main` (`git merge new-feature`).
- **Pull Requests on GitHub**
  - Opening a pull request (PR) and requesting code reviews.
  - Merging a pull request.
- **Best Practices for Collaboration**
  - Writing meaningful commit messages.
  - Keeping branches small and focused.

## Introduction to CI/CD with GitHub Actions

- **What is CI/CD?**
  - Brief explanation of Continuous Integration (CI) and Continuous Deployment (CD).
  - Why CI/CD is important for automation and DevOps.
- **Introduction to GitHub Actions**
  - Overview of how GitHub Actions can automate tasks like testing and deployment.
  - Example of a simple GitHub Actions workflow (e.g., automatically running tests on push).
- **Next Steps in Learning CI/CD**
  - Link to more advanced resources for learning about CI/CD pipelines.


## Summary

- Recap of the importance of Git and GitHub in version control and DevOps.
- Key takeaways:
  - Git tracks changes, allowing for easy rollback and collaboration.
  - GitHub provides a platform for sharing, reviewing, and deploying code.
  - Branching and pull requests are essential for team collaboration.
  - CI/CD automates workflows to improve efficiency and reliability.
- Transition to the next chapter, which will dive deeper into DevOps tools and practices.


## Exercise

This exercise will help students apply what they have learned by walking through a real-world scenario.

### Scenario

You just joined a data science team at a company, and they use Git and GitHub for collaboration. Your manager has asked you to set up your GitHub account, clone the team's repository, and make your first contribution.

### Tasks

1. **Set Up Git and GitHub**
   - Install Git on your machine.
   - Create a GitHub account if you haven’t already.
   - Configure Git with your name and email.

2. **Work with a Git Repository**
   - Create a new repository on GitHub.
   - Clone the repository to your local machine.
   - Add a new file (e.g., `hello_git.txt`), write a short message inside, and commit the changes.
   - Push your changes to GitHub.

3. **Branching and Pull Requests**
   - Create a new branch called `feature-update`.
   - Modify an existing file or add a new file.
   - Commit and push the changes to the `feature-update` branch.
   - Open a pull request on GitHub to merge your changes into `main`.
   - Merge the pull request once approved.

4. **Exploring GitHub Actions (Bonus Task)**
   - Add a GitHub Actions workflow file that runs a simple Python test on every push.
   - Observe the automated workflow execution.

5. **Reflection Questions**
   - Why is version control essential for collaborative coding?
   - How does Git help manage different versions of a project?
   - What are the benefits of using GitHub for collaboration?
   - How does CI/CD improve software and model deployment?
