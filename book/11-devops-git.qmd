# Introduction to Git and GitHub

::: {.callout-warning}
This chapter is currently in development.
:::

Version control is an essential part of modern software development, enabling teams to collaborate efficiently, track changes, and manage codebases systematically. Git, a distributed version control system, has become the industry standard for tracking modifications and maintaining project history. GitHub, a cloud-based platform built around Git, enhances collaboration by providing a central repository for sharing, reviewing, and integrating code changes.

This chapter introduces Git and GitHub as foundational tools in the DevOps journey. Understanding version control and collaboration through these tools is essential for managing code effectively and enabling seamless teamwork. Whether working independently or within a team, proficiency in Git and GitHub empowers developers to maintain project integrity, experiment with new features, and contribute to open-source projects.

By the end of this chapter, you will:

- Understand the purpose of Git and GitHub.
- Set up Git on your local machine and create a GitHub account.
- Learn basic Git commands to track changes, commit updates, and sync repositories.
- Use branching, merging, and pull requests to collaborate effectively.
- Gain an introductory understanding of CI/CD and how GitHub integrates with automated workflows.

Through hands-on exercises and step-by-step guides, this chapter will equip you with the fundamental skills to manage source code efficiently and collaborate on projects with confidence.



## Introduction to Git and GitHub

{{< video https://youtu.be/-5LWhGRObSM?si=9m6Xmlp2sNyx-rwm >}}


### What is Version Control?

Version control is a system that records changes to a file or set of files over time, allowing developers to track modifications, revert to previous versions, and collaborate seamlessly. It is essential for managing code in any software development process, preventing loss of work, and ensuring a structured workflow.

```{mermaid}
%%| fig-cap: "A version control system allows you and your teammates to work collaboratively, safely, and simultaneously on a single project. Version control helps you track all the code changes made in your project."
%%| label: fig-data-versioning
%%{init: {'gitGraph': {'mainBranchName': 'Main codebase'}} }%%

gitGraph
   commit id: "Version 1"
   commit id: "Version 2"
   branch "Your code"
   commit id: "add new feature"
   checkout "Main codebase"
   commit id: "Version 3"
   branch "Someone else's code"
   checkout "Main codebase"
   merge "Your code" id: "Version 4"
   checkout "Someone else's code"
   commit id: "another new feature"
   checkout "Main codebase"
   merge "Someone else's code" id: "Version 5"
```

Without version control, teams often encounter challenges such as overwritten files, difficulty tracking changes, and conflicts when multiple contributors work on the same codebase. For instance, in machine learning (ML) projects, version control is crucial for tracking changes to datasets, model configurations, and source code, enabling reproducibility and iterative improvements.

### What is Git?

[Git](https://git-scm.com/) is a distributed version control system (DVCS) designed to handle everything from small to very large projects efficiently. Unlike centralized version control systems, where a single server stores all versions of a project, Git enables every user to have a complete local copy of the repository. This makes Git robust in handling offline work, merging changes, and maintaining a reliable history of modifications.

For ML systems, Git helps in maintaining different experiment branches, managing multiple versions of code, and integrating model versioning workflows. Developers and data scientists use Git to collaborate on research code, ensuring that experimental changes do not disrupt stable pipelines.

### What is GitHub?

[GitHub](https://github.com/) is a cloud-based platform that provides remote repository hosting and additional features for version control collaboration. It enhances Git's capabilities by offering tools for pull requests, issue tracking, and code review, making it a central hub for software development.

While GitHub is one of the most popular Git hosting services, alternatives like GitLab and Bitbucket provide similar functionality with varying degrees of customization and integration options. In the context of DevOps and ML workflows, GitHub plays a key role in continuous integration/continuous deployment (CI/CD) pipelines, enabling automated testing, deployment, and monitoring of ML models in production environments. By using GitHub, ML engineers can streamline collaboration, ensure code quality, and integrate seamlessly with MLOps platforms.

```{mermaid}
%%| fig-align: "center"
%%| fig-cap: "This illustrates the simple relationship between a local Git repository on a developer's computer and a remote GitHub repository hosted in the cloud. Git and Github work in tandem allow you to push and pull content between the two locations."
architecture-beta
    service github(cloud)[Github]
    service git(disk)[Git on local computer]

    git:T <--> B:github
```

### Using Git and GitHub Together

Although Git and GitHub are separate tools, they are most commonly used together in modern software development. Git serves as the local version control system that tracks changes and manages branches, while GitHub acts as the remote hosting service that facilitates collaboration among multiple contributors. Developers use Git commands to manage their local repositories and push their changes to GitHub for storage, sharing, and team collaboration.

::: {#fig-git-github}
![](images/Gitvs_Github-1a-1.jpg)

Git vs. Github
:::

For ML teams, this combination is particularly powerful. By using Git locally to track changes in data processing scripts, model training code, and experiment configurations, teams can ensure that their work is versioned and reproducible. GitHub then provides a centralized location where team members can review each other’s code, integrate improvements, and leverage automated workflows for model deployment and testing. The synergy between Git and GitHub makes them indispensable tools for both traditional software development and MLOps practices.


## Setting Up Git and GitHub

- **Installing Git**
  - Step-by-step instructions for installing Git on Windows, Mac, and Linux.
  - Verifying installation (`git --version`).
- **Creating a GitHub Account**
  - Step-by-step guide to signing up on GitHub.
  - Overview of GitHub's interface (Repositories, Issues, Pull Requests, Actions).
- **Configuring Git for First Use**
  - Setting up a username and email (`git config --global user.name "Your Name"`, `git config --global user.email "you@example.com"`).
  - Understanding SSH keys and authenticating GitHub with SSH.


## Git Basics: Tracking and Managing Changes

- **Creating a Local Git Repository**
  - Initializing a repository (`git init`).
  - Cloning a repository (`git clone`).
- **Staging and Committing Changes**
  - Adding files to staging (`git add`).
  - Committing changes (`git commit -m "commit message"`).
- **Viewing Repository History**
  - Checking commit history (`git log`).
  - Understanding the SHA hash for commits.


## Synchronizing with GitHub

- **Connecting a Local Repository to GitHub**
  - Creating a new repository on GitHub.
  - Pushing an existing repository to GitHub (`git remote add origin`, `git push`).
- **Pulling Changes from GitHub**
  - Fetching and merging remote changes (`git pull`).
- **Handling Merge Conflicts**
  - Understanding merge conflicts and resolving them manually.


## Collaboration with Branching and Pull Requests

- **Why Use Branches?**
  - Overview of branching as a way to develop features without affecting the main branch.
- **Creating and Switching Branches**
  - Creating a new branch (`git branch new-feature`).
  - Switching branches (`git checkout new-feature` or `git switch new-feature`).
- **Merging Branches**
  - Merging changes into `main` (`git merge new-feature`).
- **Pull Requests on GitHub**
  - Opening a pull request (PR) and requesting code reviews.
  - Merging a pull request.
- **Best Practices for Collaboration**
  - Writing meaningful commit messages.
  - Keeping branches small and focused.

## Introduction to CI/CD with GitHub Actions

- **What is CI/CD?**
  - Brief explanation of Continuous Integration (CI) and Continuous Deployment (CD).
  - Why CI/CD is important for automation and DevOps.
- **Introduction to GitHub Actions**
  - Overview of how GitHub Actions can automate tasks like testing and deployment.
  - Example of a simple GitHub Actions workflow (e.g., automatically running tests on push).
- **Next Steps in Learning CI/CD**
  - Link to more advanced resources for learning about CI/CD pipelines.


## Summary

- Recap of the importance of Git and GitHub in version control and DevOps.
- Key takeaways:
  - Git tracks changes, allowing for easy rollback and collaboration.
  - GitHub provides a platform for sharing, reviewing, and deploying code.
  - Branching and pull requests are essential for team collaboration.
  - CI/CD automates workflows to improve efficiency and reliability.
- Transition to the next chapter, which will dive deeper into DevOps tools and practices.


## Exercise

This exercise will help students apply what they have learned by walking through a real-world scenario.

### Scenario

You just joined a data science team at a company, and they use Git and GitHub for collaboration. Your manager has asked you to set up your GitHub account, clone the team's repository, and make your first contribution.

### Tasks

1. **Set Up Git and GitHub**
   - Install Git on your machine.
   - Create a GitHub account if you haven’t already.
   - Configure Git with your name and email.

2. **Work with a Git Repository**
   - Create a new repository on GitHub.
   - Clone the repository to your local machine.
   - Add a new file (e.g., `hello_git.txt`), write a short message inside, and commit the changes.
   - Push your changes to GitHub.

3. **Branching and Pull Requests**
   - Create a new branch called `feature-update`.
   - Modify an existing file or add a new file.
   - Commit and push the changes to the `feature-update` branch.
   - Open a pull request on GitHub to merge your changes into `main`.
   - Merge the pull request once approved.

4. **Exploring GitHub Actions (Bonus Task)**
   - Add a GitHub Actions workflow file that runs a simple Python test on every push.
   - Observe the automated workflow execution.

5. **Reflection Questions**
   - Why is version control essential for collaborative coding?
   - How does Git help manage different versions of a project?
   - What are the benefits of using GitHub for collaboration?
   - How does CI/CD improve software and model deployment?
